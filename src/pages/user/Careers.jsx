import { useState } from 'react';

export default function Careers() {
  const [selectedJob, setSelectedJob] = useState(null);
  const [showApplicationForm, setShowApplicationForm] = useState(false);

  const jobs = [
    {
      id: 1,
      title: 'Frontend Developer',
      department: 'Engineering',
      location: 'Ho Chi Minh City',
      type: 'Full-time',
      experience: '2-4 years',
      salary: '15-25M VND',
      description: 'Ph√°t tri·ªÉn giao di·ªán ng∆∞·ªùi d√πng hi·ªán ƒë·∫°i v·ªõi React, Vue.js v√† c√°c c√¥ng ngh·ªá frontend m·ªõi nh·∫•t.',
      requirements: [
        'Kinh nghi·ªám 2+ nƒÉm v·ªõi React.js ho·∫∑c Vue.js',
        'Th√†nh th·∫°o HTML5, CSS3, JavaScript ES6+',
        'Kinh nghi·ªám v·ªõi TailwindCSS ho·∫∑c CSS-in-JS',
        'Hi·ªÉu bi·∫øt v·ªÅ responsive design v√† cross-browser compatibility',
        'Kinh nghi·ªám v·ªõi Git v√† c√°c c√¥ng c·ª• ph√°t tri·ªÉn hi·ªán ƒë·∫°i'
      ],
      benefits: [
        'L∆∞∆°ng c·∫°nh tranh v√† th∆∞·ªüng theo hi·ªáu su·∫•t',
        'B·∫£o hi·ªÉm s·ª©c kh·ªèe v√† c√°c ph√∫c l·ª£i kh√°c',
        'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, s√°ng t·∫°o',
        'C∆° h·ªôi ph√°t tri·ªÉn k·ªπ nƒÉng v√† thƒÉng ti·∫øn'
      ],
      skills: ['React', 'Vue.js', 'JavaScript', 'CSS3', 'Git'],
      color: 'from-blue-500 to-cyan-500'
    },
    {
      id: 2,
      title: 'Backend Developer',
      department: 'Engineering',
      location: 'Ho Chi Minh City',
      type: 'Full-time',
      experience: '3-5 years',
      salary: '18-30M VND',
      description: 'X√¢y d·ª±ng v√† ph√°t tri·ªÉn c√°c API, microservices v√† h·ªá th·ªëng backend v·ªõi Node.js, Python.',
      requirements: [
        'Kinh nghi·ªám 3+ nƒÉm v·ªõi Node.js ho·∫∑c Python',
        'Th√†nh th·∫°o REST API v√† GraphQL',
        'Kinh nghi·ªám v·ªõi MongoDB, PostgreSQL',
        'Hi·ªÉu bi·∫øt v·ªÅ microservices architecture',
        'Kinh nghi·ªám v·ªõi Docker v√† cloud platforms'
      ],
      benefits: [
        'L∆∞∆°ng c·∫°nh tranh v√† th∆∞·ªüng theo hi·ªáu su·∫•t',
        'B·∫£o hi·ªÉm s·ª©c kh·ªèe v√† c√°c ph√∫c l·ª£i kh√°c',
        'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, s√°ng t·∫°o',
        'C∆° h·ªôi ph√°t tri·ªÉn k·ªπ nƒÉng v√† thƒÉng ti·∫øn'
      ],
      skills: ['Node.js', 'Python', 'MongoDB', 'PostgreSQL', 'Docker'],
      color: 'from-green-500 to-emerald-500'
    },
    {
      id: 3,
      title: 'Full-stack Developer',
      department: 'Engineering',
      location: 'Ho Chi Minh City',
      type: 'Full-time',
      experience: '3-6 years',
      salary: '20-35M VND',
      description: 'Ph√°t tri·ªÉn to√†n di·ªán c·∫£ frontend v√† backend, x√¢y d·ª±ng ·ª©ng d·ª•ng web ho√†n ch·ªânh.',
      requirements: [
        'Kinh nghi·ªám 3+ nƒÉm full-stack development',
        'Th√†nh th·∫°o React/Vue.js v√† Node.js/Python',
        'Kinh nghi·ªám v·ªõi database design v√† optimization',
        'Hi·ªÉu bi·∫øt v·ªÅ DevOps v√† deployment',
        'K·ªπ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ v√† t∆∞ duy logic'
      ],
      benefits: [
        'L∆∞∆°ng c·∫°nh tranh v√† th∆∞·ªüng theo hi·ªáu su·∫•t',
        'B·∫£o hi·ªÉm s·ª©c kh·ªèe v√† c√°c ph√∫c l·ª£i kh√°c',
        'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, s√°ng t·∫°o',
        'C∆° h·ªôi ph√°t tri·ªÉn k·ªπ nƒÉng v√† thƒÉng ti·∫øn'
      ],
      skills: ['React', 'Node.js', 'MongoDB', 'Docker', 'AWS'],
      color: 'from-purple-500 to-pink-500'
    },
    {
      id: 4,
      title: 'DevOps Engineer',
      department: 'Engineering',
      location: 'Ho Chi Minh City',
      type: 'Full-time',
      experience: '2-4 years',
      salary: '16-28M VND',
      description: 'Qu·∫£n l√Ω infrastructure, CI/CD pipeline v√† ƒë·∫£m b·∫£o h·ªá th·ªëng v·∫≠n h√†nh ·ªïn ƒë·ªãnh.',
      requirements: [
        'Kinh nghi·ªám 2+ nƒÉm v·ªõi AWS/Azure/GCP',
        'Th√†nh th·∫°o Docker, Kubernetes',
        'Kinh nghi·ªám v·ªõi CI/CD tools (Jenkins, GitLab CI)',
        'Hi·ªÉu bi·∫øt v·ªÅ monitoring v√† logging',
        'K·ªπ nƒÉng automation v√† scripting'
      ],
      benefits: [
        'L∆∞∆°ng c·∫°nh tranh v√† th∆∞·ªüng theo hi·ªáu su·∫•t',
        'B·∫£o hi·ªÉm s·ª©c kh·ªèe v√† c√°c ph√∫c l·ª£i kh√°c',
        'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, s√°ng t·∫°o',
        'C∆° h·ªôi ph√°t tri·ªÉn k·ªπ nƒÉng v√† thƒÉng ti·∫øn'
      ],
      skills: ['AWS', 'Docker', 'Kubernetes', 'Jenkins', 'Terraform'],
      color: 'from-orange-500 to-red-500'
    },
    {
      id: 5,
      title: 'UI/UX Designer',
      department: 'Design',
      location: 'Ho Chi Minh City',
      type: 'Full-time',
      experience: '2-4 years',
      salary: '12-22M VND',
      description: 'Thi·∫øt k·∫ø giao di·ªán ng∆∞·ªùi d√πng ƒë·∫πp, tr·ª±c quan v√† t·ªëi ∆∞u tr·∫£i nghi·ªám ng∆∞·ªùi d√πng.',
      requirements: [
        'Kinh nghi·ªám 2+ nƒÉm UI/UX design',
        'Th√†nh th·∫°o Figma, Adobe Creative Suite',
        'Hi·ªÉu bi·∫øt v·ªÅ design system v√† user research',
        'Kinh nghi·ªám v·ªõi prototyping tools',
        'Portfolio th·ªÉ hi·ªán kh·∫£ nƒÉng thi·∫øt k·∫ø'
      ],
      benefits: [
        'L∆∞∆°ng c·∫°nh tranh v√† th∆∞·ªüng theo hi·ªáu su·∫•t',
        'B·∫£o hi·ªÉm s·ª©c kh·ªèe v√† c√°c ph√∫c l·ª£i kh√°c',
        'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, s√°ng t·∫°o',
        'C∆° h·ªôi ph√°t tri·ªÉn k·ªπ nƒÉng v√† thƒÉng ti·∫øn'
      ],
      skills: ['Figma', 'Adobe XD', 'Sketch', 'Prototyping', 'User Research'],
      color: 'from-pink-500 to-rose-500'
    },
    {
      id: 6,
      title: 'Project Manager',
      department: 'Management',
      location: 'Ho Chi Minh City',
      type: 'Full-time',
      experience: '3-5 years',
      salary: '18-30M VND',
      description: 'Qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm, ƒë·∫£m b·∫£o ti·∫øn ƒë·ªô v√† ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m.',
      requirements: [
        'Kinh nghi·ªám 3+ nƒÉm qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm',
        'Hi·ªÉu bi·∫øt v·ªÅ Agile/Scrum methodology',
        'K·ªπ nƒÉng giao ti·∫øp v√† l√£nh ƒë·∫°o t·ªët',
        'Kinh nghi·ªám v·ªõi project management tools',
        'Kh·∫£ nƒÉng l√†m vi·ªác v·ªõi nhi·ªÅu team kh√°c nhau'
      ],
      benefits: [
        'L∆∞∆°ng c·∫°nh tranh v√† th∆∞·ªüng theo hi·ªáu su·∫•t',
        'B·∫£o hi·ªÉm s·ª©c kh·ªèe v√† c√°c ph√∫c l·ª£i kh√°c',
        'M√¥i tr∆∞·ªùng l√†m vi·ªác nƒÉng ƒë·ªông, s√°ng t·∫°o',
        'C∆° h·ªôi ph√°t tri·ªÉn k·ªπ nƒÉng v√† thƒÉng ti·∫øn'
      ],
      skills: ['Agile', 'Scrum', 'Jira', 'Leadership', 'Communication'],
      color: 'from-indigo-500 to-purple-500'
    }
  ];

  const getTypeColor = (type) => {
    switch (type) {
      case 'Full-time': return 'bg-green-500';
      case 'Part-time': return 'bg-blue-500';
      case 'Contract': return 'bg-yellow-500';
      default: return 'bg-gray-500';
    }
  };

  return (
    <div className="min-h-screen py-16 px-4 bg-gray-50">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-5xl font-bold text-gray-800 mb-6">
            C∆° h·ªôi ngh·ªÅ nghi·ªáp
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Tham gia ƒë·ªôi ng≈© AI chuy√™n gia c·ªßa ch√∫ng t√¥i v√† c√πng x√¢y d·ª±ng nh·ªØng s·∫£n ph·∫©m AI tuy·ªÉn d·ª•ng ti√™n ti·∫øn
          </p>
        </div>

        {/* Jobs Grid */}
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {jobs.map((job) => (
            <div 
              key={job.id}
              className="bg-white rounded-2xl p-8 border border-gray-200 hover:shadow-lg transition-all duration-300 hover:scale-105 group cursor-pointer"
              onClick={() => setSelectedJob(job)}
            >
              <div className="flex items-start justify-between mb-4">
                <div className={`w-16 h-16 bg-gradient-to-br ${job.color} rounded-2xl flex items-center justify-center text-2xl`}>
                  üíº
                </div>
                <span className={`px-3 py-1 rounded-full text-xs font-semibold text-white ${getTypeColor(job.type)}`}>
                  {job.type}
                </span>
              </div>
              
              <h3 className="text-2xl font-bold text-gray-800 mb-3 group-hover:text-blue-600 transition-colors">
                {job.title}
              </h3>
              
              <div className="space-y-2 mb-4">
                <div className="flex items-center gap-2 text-gray-600 text-sm">
                  <span>üìç</span>
                  <span>{job.location}</span>
                </div>
                <div className="flex items-center gap-2 text-gray-600 text-sm">
                  <span>‚è∞</span>
                  <span>{job.experience}</span>
                </div>
                <div className="flex items-center gap-2 text-gray-600 text-sm">
                  <span>üí∞</span>
                  <span>{job.salary}</span>
                </div>
              </div>
              
              <p className="text-gray-600 text-sm mb-4 leading-relaxed">
                {job.description}
              </p>
              
              <div className="flex flex-wrap gap-2">
                {job.skills.slice(0, 3).map((skill, index) => (
                  <span key={index} className="px-2 py-1 bg-gradient-to-r from-blue-500/20 to-indigo-500/20 rounded text-xs text-blue-600 border border-blue-500/30">
                    {skill}
                  </span>
                ))}
                {job.skills.length > 3 && (
                  <span className="px-2 py-1 bg-gray-100 rounded text-xs text-gray-600">
                    +{job.skills.length - 3} more
                  </span>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Job Details Modal */}
        {selectedJob && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <div className="bg-white/10 backdrop-blur-md rounded-3xl max-w-4xl w-full max-h-[90vh] overflow-y-auto border border-white/20">
              <div className="p-8">
                <div className="flex items-start justify-between mb-6">
                  <div>
                    <h2 className="text-3xl font-bold text-white mb-2">{selectedJob.title}</h2>
                    <div className="flex items-center gap-4 text-gray-300">
                      <span>üìç {selectedJob.location}</span>
                      <span>‚è∞ {selectedJob.experience}</span>
                      <span>üí∞ {selectedJob.salary}</span>
                    </div>
                  </div>
                  <button 
                    onClick={() => setSelectedJob(null)}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <div className="space-y-8">
                  <div>
                    <h3 className="text-xl font-bold text-white mb-4">M√¥ t·∫£ c√¥ng vi·ªác</h3>
                    <p className="text-gray-300 leading-relaxed">{selectedJob.description}</p>
                  </div>
                  
                  <div>
                    <h3 className="text-xl font-bold text-white mb-4">Y√™u c·∫ßu</h3>
                    <ul className="space-y-2">
                      {selectedJob.requirements.map((req, index) => (
                        <li key={index} className="flex items-start gap-3 text-gray-300">
                          <span className="w-2 h-2 bg-gradient-to-r from-indigo-400 to-purple-400 rounded-full mt-2"></span>
                          <span>{req}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div>
                    <h3 className="text-xl font-bold text-white mb-4">Quy·ªÅn l·ª£i</h3>
                    <ul className="space-y-2">
                      {selectedJob.benefits.map((benefit, index) => (
                        <li key={index} className="flex items-start gap-3 text-gray-300">
                          <span className="w-2 h-2 bg-gradient-to-r from-green-400 to-emerald-400 rounded-full mt-2"></span>
                          <span>{benefit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                  
                  <div>
                    <h3 className="text-xl font-bold text-white mb-4">K·ªπ nƒÉng y√™u c·∫ßu</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedJob.skills.map((skill, index) => (
                        <span key={index} className="px-3 py-1 bg-gradient-to-r from-indigo-500/20 to-purple-500/20 rounded-full text-sm text-indigo-300 border border-indigo-500/30">
                          {skill}
                        </span>
                      ))}
                    </div>
                  </div>
                  
                  <div className="flex gap-4">
                    <button 
                      onClick={() => setShowApplicationForm(true)}
                      className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-6 py-3 rounded-full font-semibold hover:from-indigo-600 hover:to-purple-600 transition-all duration-300 hover:scale-105"
                    >
                      ·ª®ng tuy·ªÉn ngay
                    </button>
                    <button 
                      onClick={() => setSelectedJob(null)}
                      className="bg-white/10 text-white px-6 py-3 rounded-full font-semibold hover:bg-white/20 transition-all duration-300"
                    >
                      ƒê√≥ng
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Application Form Modal */}
        {showApplicationForm && (
          <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
            <div className="bg-white/10 backdrop-blur-md rounded-3xl max-w-2xl w-full border border-white/20">
              <div className="p-8">
                <div className="flex items-center justify-between mb-6">
                  <h2 className="text-2xl font-bold text-white">·ª®ng tuy·ªÉn {selectedJob?.title}</h2>
                  <button 
                    onClick={() => setShowApplicationForm(false)}
                    className="text-gray-400 hover:text-white transition-colors"
                  >
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                  </button>
                </div>
                
                <form className="space-y-6">
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-semibold text-white mb-2">H·ªç t√™n *</label>
                      <input 
                        type="text" 
                        className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nh·∫≠p h·ªç t√™n"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-white mb-2">Email *</label>
                      <input 
                        type="email" 
                        className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nh·∫≠p email"
                      />
                    </div>
                  </div>
                  
                  <div className="grid md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-semibold text-white mb-2">S·ªë ƒëi·ªán tho·∫°i *</label>
                      <input 
                        type="tel" 
                        className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500"
                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-semibold text-white mb-2">Kinh nghi·ªám</label>
                      <select className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-indigo-500">
                        <option value="">Ch·ªçn kinh nghi·ªám</option>
                        <option value="0-1">0-1 nƒÉm</option>
                        <option value="1-3">1-3 nƒÉm</option>
                        <option value="3-5">3-5 nƒÉm</option>
                        <option value="5+">5+ nƒÉm</option>
                      </select>
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-white mb-2">Th∆∞ xin vi·ªác</label>
                    <textarea 
                      className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-indigo-500 h-32"
                      placeholder="Vi·∫øt th∆∞ xin vi·ªác c·ªßa b·∫°n..."
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-semibold text-white mb-2">CV/Resume</label>
                    <input 
                      type="file" 
                      accept=".pdf,.doc,.docx"
                      className="w-full bg-white/10 border border-white/20 rounded-lg px-4 py-3 text-white file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-500 file:text-white hover:file:bg-indigo-600"
                    />
                  </div>
                  
                  <div className="flex gap-4">
                    <button 
                      type="submit"
                      className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white px-6 py-3 rounded-full font-semibold hover:from-indigo-600 hover:to-purple-600 transition-all duration-300 hover:scale-105"
                    >
                      G·ª≠i ·ª©ng tuy·ªÉn
                    </button>
                    <button 
                      type="button"
                      onClick={() => setShowApplicationForm(false)}
                      className="bg-white/10 text-white px-6 py-3 rounded-full font-semibold hover:bg-white/20 transition-all duration-300"
                    >
                      H·ªßy
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        )}

        {/* Why Work With Us */}
        <div className="mt-20">
          <h2 className="text-4xl font-bold text-center text-gray-800 mb-12">T·∫°i sao ch·ªçn ch√∫ng t√¥i?</h2>
          <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8">
            <div className="text-center bg-white rounded-2xl p-6 shadow-lg">
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-indigo-500 rounded-full mx-auto mb-4 flex items-center justify-center text-3xl">
                üöÄ
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">M√¥i tr∆∞·ªùng AI</h3>
              <p className="text-gray-600">L√†m vi·ªác trong m√¥i tr∆∞·ªùng AI s√°ng t·∫°o v·ªõi c√°c d·ª± √°n th√∫ v·ªã</p>
            </div>
            <div className="text-center bg-white rounded-2xl p-6 shadow-lg">
              <div className="w-20 h-20 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full mx-auto mb-4 flex items-center justify-center text-3xl">
                üìà
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">Ph√°t tri·ªÉn AI</h3>
              <p className="text-gray-600">C∆° h·ªôi h·ªçc h·ªèi v√† ph√°t tri·ªÉn k·ªπ nƒÉng AI v·ªõi c√¥ng ngh·ªá m·ªõi nh·∫•t</p>
            </div>
            <div className="text-center bg-white rounded-2xl p-6 shadow-lg">
              <div className="w-20 h-20 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full mx-auto mb-4 flex items-center justify-center text-3xl">
                üí∞
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">L∆∞∆°ng c·∫°nh tranh</h3>
              <p className="text-gray-600">M·ª©c l∆∞∆°ng h·∫•p d·∫´n v√† c√°c ph√∫c l·ª£i t·ªët nh·∫•t trong ng√†nh AI</p>
            </div>
            <div className="text-center bg-white rounded-2xl p-6 shadow-lg">
              <div className="w-20 h-20 bg-gradient-to-br from-orange-500 to-red-500 rounded-full mx-auto mb-4 flex items-center justify-center text-3xl">
                ü§ù
              </div>
              <h3 className="text-xl font-bold text-gray-800 mb-3">ƒê·ªôi ng≈© AI</h3>
              <p className="text-gray-600">L√†m vi·ªác v·ªõi ƒë·ªôi ng≈© AI chuy√™n nghi·ªáp, th√¢n thi·ªán v√† h·ªó tr·ª£ l·∫´n nhau</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
